-- ====================================================================
-- FULL RECOVERY SCHEMA SCRIPT
-- Generated by Gemini
-- Run this entire script once in your Supabase SQL Editor.
-- ====================================================================

-- Phase 1: Create Schemas
CREATE SCHEMA IF NOT EXISTS client_services;
CREATE SCHEMA IF NOT EXISTS credit;
CREATE SCHEMA IF NOT EXISTS public;
CREATE SCHEMA IF NOT EXISTS control_room;

-- Phase 2: Create Custom Types
CREATE TYPE public.payment_status AS ENUM ('pending', 'processing', 'completed', 'failed', 'canceled');
CREATE TYPE public.plan_type AS ENUM ('free', 'pro', 'enterprise');
CREATE TYPE public.user_role AS ENUM ('admin', 'user', 'viewer', 'superadmin', 'system');
CREATE TYPE public.memory_type AS ENUM ('context', 'project', 'knowledge', 'reference', 'personal', 'workflow');

-- Phase 3: Create Tables (without constraints first)

-- public schema tables
CREATE TABLE public.profiles (
    id uuid NOT NULL,
    first_name text,
    last_name text,
    company_name text,
    business_type text,
    is_vendor boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    email text,
    full_name text,
    subscription_tier text DEFAULT 'free'::text,
    stripe_customer_id text
);

CREATE TABLE public.users (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    email character varying(255) NOT NULL,
    password_hash text NOT NULL,
    organization_id uuid NOT NULL,
    role public.user_role DEFAULT 'user'::public.user_role NOT NULL,
    plan public.plan_type DEFAULT 'free'::public.plan_type NOT NULL,
    settings jsonb DEFAULT '{}'::jsonb,
    last_login timestamp with time zone,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);

CREATE TABLE public.organizations (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(255) NOT NULL,
    slug character varying(100) NOT NULL,
    description text,
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

-- control_room schema tables
CREATE TABLE control_room.apps (
  id TEXT PRIMARY KEY,
  name TEXT NOT NULL,
  description TEXT,
  status TEXT DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'maintenance')),
  schema_name TEXT,
  original_project_ref TEXT,
  migration_status TEXT DEFAULT 'pending' CHECK (migration_status IN ('pending', 'in_progress', 'completed')),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- client_services schema tables
CREATE TABLE client_services.users (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    email text NOT NULL,
    phone_number text NOT NULL,
    first_name text NOT NULL,
    last_name text NOT NULL,
    password_hash text NOT NULL,
    salt text NOT NULL,
    status text DEFAULT 'PENDING'::text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    last_login timestamp with time zone
);

-- credit schema tables
CREATE TABLE credit.applications (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid NOT NULL,
    business_id uuid,
    amount_requested numeric(15,2) NOT NULL,
    currency character varying(3) DEFAULT 'NGN'::character varying,
    purpose text NOT NULL,
    loan_term_months integer NOT NULL,
    status character varying(50) DEFAULT 'pending'::character varying NOT NULL,
    metadata jsonb DEFAULT '{}'::jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

-- Phase 4: Add Primary Keys and other constraints
ALTER TABLE ONLY public.profiles ADD CONSTRAINT profiles_pkey PRIMARY KEY (id);
ALTER TABLE ONLY public.users ADD CONSTRAINT users_pkey1 PRIMARY KEY (id);
ALTER TABLE ONLY public.organizations ADD CONSTRAINT organizations_pkey PRIMARY KEY (id);
ALTER TABLE ONLY control_room.apps ADD CONSTRAINT apps_pkey PRIMARY KEY (id);
ALTER TABLE ONLY client_services.users ADD CONSTRAINT users_pkey2 PRIMARY KEY (id);
ALTER TABLE ONLY credit.applications ADD CONSTRAINT applications_pkey PRIMARY KEY (id);

-- Phase 5: Add Foreign Keys
ALTER TABLE ONLY public.profiles ADD CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE;
ALTER TABLE ONLY public.users ADD CONSTRAINT users_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id) ON DELETE CASCADE;

-- Phase 6: Create Functions and Triggers
CREATE OR REPLACE FUNCTION public.handle_new_user() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER SET search_path TO 'public' AS $$
BEGIN
  INSERT INTO public.profiles (id, email, full_name) VALUES (NEW.id, NEW.email, NEW.raw_user_meta_data->>'full_name');
  RETURN NEW;
END;
$$;

CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- Phase 7: Populate Apps Registry
INSERT INTO control_room.apps (id, name, description, schema_name) VALUES
  ('the-fixer-initiative', 'The Fixer Initiative', 'Central operations hub for new movement', 'app_the_fixer_initiative'),
  ('vibe-frontend', 'vibe-frontend', 'Universal API MCP Frontend with multiple tools', 'app_vibe_frontend'),
  ('vortexcore', 'vortexcore', '', 'app_vortexcore'),
  ('lanonasis-maas', 'lanonasis-maas', '', 'app_lanonasis_maas'),
  ('onasis-gateway', 'onasis-gateway', 'Comprehensive API service warehouse with MCP interfaces', 'app_onasis_gateway'),
  ('onasis-core', 'Onasis-CORE', 'Privacy-First Infrastructure for Lan Onasis ecosystem', 'app_onasis_core'),
  ('sub-pro', 'SUB-PRO', '', 'app_sub_pro'),
  ('seftec-store', 'seftec-store', 'SEFTEC B2B TRADE HUB', 'app_seftec_store'),
  ('cua-exp-prototype', 'cua-exp-prototype', '', 'app_cua_exp_prototype'),
  ('credit-as-a-service', 'credit-as-a-service', 'Enterprise microservices for fintech', 'app_credit_as_a_service'),
  ('expo_bank_app', 'expo_bank_app', '', 'app_expo_bank_app'),
  ('maple-movement-hub', 'maple-movement-hub', '', 'app_maple_movement_hub'),
  ('seftechub-verification-service', 'seftechub-verification-service', 'Unified Identity, Business, Biometric & Background Checks', 'app_seftechub_verification_service'),
  ('mcp-monorepo', 'mcp-monorepo', '', 'app_mcp_monorepo'),
  ('micro-services', 'micro-services', 'GitHub-ClickUp automation microservice', 'app_micro_services'),
  ('vortexcore-saas', 'vortexcore-saas', '', 'app_vortexcore_saas'),
  ('doyen-autos', 'doyen-autos', '', 'app_doyen_autos'),
  ('personal-subscription-manager', 'Personal-subscription-manager', '', 'app_personal_subscription_manager'),
  ('lanonasisindex', 'LanOnasisIndex', 'Lan Onasis Landing page', 'app_lanonasisindex'),
  ('sd-ghost-protocol', 'sd-ghost-protocol', '', 'app_sd_ghost_protocol'),
  ('enterprise-context-xx', 'enterprise-context-xx', '', 'app_enterprise_context_xx'),
  ('agent-banks', 'agent-banks', 'AI automation assistant', 'app_agent_banks'),
  ('seftechub-mobile', 'seftechub-mobile', '', 'app_seftechub_mobile'),
  ('nexus-edge', 'nexus-edge', '', 'app_nexus_edge'),
  ('social-connect', 'social-connect', '', 'app_social_connect'),
  ('ai-brainbox', 'ai-brainbox', '', 'app_ai_brainbox'),
  ('logistics-platform', 'logistics-platform', '', 'app_logistics_platform'),
  ('plannerai', 'plannerai', '', 'app_plannerai'),
  ('network-sync', 'network-sync', '', 'app_network_sync'),
  ('seftechub-saas', 'seftechub-saas', '', 'app_seftechub_saas'),
  ('saas-lanonasis', 'saas-lanonasis', '', 'app_saas_lanonasis'),
  ('mega-meal', 'mega-meal', '', 'app_mega_meal'),
  ('gold-pulser', 'gold-pulser', '', 'app_gold_pulser'),
  ('sync-plan-flow', 'sync-plan-flow', '', 'app_sync_plan_flow'),
  ('chy-bic-luxe', 'chy-bic-luxe', 'Repository for BIC Luxe', 'app_chy_bic_luxe'),
  ('seftec-bank-insights', 'seftec-bank-insights', '', 'app_seftec_bank_insights'),
  ('apple-store-lekki', 'apple-store-lekki', '', 'app_apple_store_lekki'),
  ('nxtgen-api-saas-platform', 'nxtgen-api-saas-platform', '', 'app_nxtgen_api_saas_platform'),
  ('business-services', 'business-services', '', 'app_business_services'),
  ('grizzen-rev', 'Grizzen-Rev', 'Created with StackBlitz', 'app_grizzen_rev'),
  ('nixieai-by-samara', 'NixieAI-by-Samara', 'Learning Platform', 'app_nixieai_by_samara')
ON CONFLICT (id) DO NOTHING;
