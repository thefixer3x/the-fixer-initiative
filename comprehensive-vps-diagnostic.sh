#!/bin/bash

# Comprehensive VPS Diagnostic and Recovery Tool
# Supports both SSH and API approaches

VPS_IP="168.231.74.29"
API_TOKEN="$HOSTINGER_API_TOKEN"

echo "üîç HOSTINGER VPS COMPREHENSIVE DIAGNOSTIC"
echo "========================================="
echo "Target VPS: $VPS_IP"
echo "Timestamp: $(date)"
echo ""

# 1. Basic Connectivity
echo "üåê NETWORK CONNECTIVITY"
echo "----------------------"
if ping -c 2 $VPS_IP >/dev/null 2>&1; then
    echo "‚úÖ Server is ONLINE"
    ping_stats=$(ping -c 5 $VPS_IP | tail -1)
    echo "   üìä $ping_stats"
else
    echo "‚ùå Server is OFFLINE or unreachable"
    echo "   üö® Critical: Server may be down"
fi
echo ""

# 2. Port Scanning
echo "üîå PORT ACCESSIBILITY"
echo "--------------------"
common_ports=(22 80 443 2222 22000 3389 21 25 53 110 143 993 995)
open_ports=()

for port in "${common_ports[@]}"; do
    if nc -z -w2 $VPS_IP $port 2>/dev/null; then
        echo "‚úÖ Port $port: OPEN"
        open_ports+=($port)
        
        # Special handling for SSH ports
        if [[ $port == 22 || $port == 2222 || $port == 22000 ]]; then
            echo "   üîë SSH potentially available on port $port"
        fi
    else
        echo "‚ùå Port $port: CLOSED"
    fi
done
echo ""

# 3. SSH Connectivity Tests
echo "üîê SSH CONNECTION ATTEMPTS"
echo "-------------------------"
ssh_success=false
for port in 22 2222 22000 2200; do
    echo -n "Trying SSH on port $port... "
    if timeout 5 ssh -p $port -i ~/.ssh/id_rsa_vps -o ConnectTimeout=3 -o BatchMode=yes -o StrictHostKeyChecking=no root@$VPS_IP "echo 'SSH_SUCCESS'" 2>/dev/null | grep -q "SSH_SUCCESS"; then
        echo "‚úÖ SUCCESS!"
        echo "   üéâ SSH is working on port $port"
        ssh_success=true
        working_ssh_port=$port
        break
    else
        echo "‚ùå Failed"
    fi
done

if [ "$ssh_success" = false ]; then
    echo "üö® No SSH access available on common ports"
    echo "   Possible causes:"
    echo "   - SSH service stopped"
    echo "   - Firewall blocking access"
    echo "   - Server in maintenance mode"
    echo "   - Custom SSH port configuration"
fi
echo ""

# 4. API Diagnostics
echo "üîó HOSTINGER API DIAGNOSTICS"
echo "----------------------------"
api_working=false

# Test various API endpoints
declare -A api_endpoints=(
    ["Primary API"]="https://api.hostinger.com/v1"
    ["Hosting API"]="https://api.hostinger.com/v1/hosting"
    ["VPS API"]="https://api.hostinger.com/v1/vps"
    ["Cloud API"]="https://api.hostinger.com/v1/cloud"
    ["Backup API"]="https://rest-api.hostinger.com/v2"
)

for name in "${!api_endpoints[@]}"; do
    endpoint="${api_endpoints[$name]}"
    echo -n "Testing $name... "
    
    response=$(curl -s -w "%{http_code}" -o /tmp/api_response.json \
        -H "Authorization: Bearer $API_TOKEN" \
        -H "Accept: application/json" \
        -H "User-Agent: VPS-Diagnostic/1.0" \
        --connect-timeout 10 \
        "$endpoint" 2>/dev/null)
    
    case $response in
        200)
            echo "‚úÖ SUCCESS (HTTP 200)"
            api_working=true
            echo "   üìÑ Response: $(head -c 100 /tmp/api_response.json)..."
            ;;
        401)
            echo "‚ùå UNAUTHORIZED (HTTP 401)"
            echo "   üîë Check API token validity"
            ;;
        403)
            echo "‚ùå FORBIDDEN (HTTP 403)"
            echo "   üö´ Access denied - check permissions"
            ;;
        404)
            echo "‚ùå NOT FOUND (HTTP 404)"
            echo "   üìç Endpoint may not exist"
            ;;
        *)
            echo "‚ö†Ô∏è  HTTP $response or timeout"
            ;;
    esac
done
echo ""

# 5. Recovery Recommendations
echo "üõ†Ô∏è  RECOVERY RECOMMENDATIONS"
echo "=============================="

if [ "$ssh_success" = true ]; then
    echo "‚úÖ SSH ACCESS AVAILABLE"
    echo "   üîß Connect using: ssh -p $working_ssh_port -i ~/.ssh/id_rsa_vps root@$VPS_IP"
    echo "   üìã Available diagnostic commands:"
    echo "      - systemctl status sshd"
    echo "      - htop (system resources)"
    echo "      - df -h (disk usage)"
    echo "      - free -h (memory usage)"
    echo "      - netstat -tlnp (listening services)"
elif [ "$api_working" = true ]; then
    echo "üîó API ACCESS AVAILABLE"
    echo "   üì° Use API for remote management"
    echo "   üíª Access Hostinger control panel: https://hpanel.hostinger.com/"
    echo "   üñ•Ô∏è  Try browser-based console if available"
else
    echo "üö® CRITICAL: NO ACCESS METHODS WORKING"
    echo "   üìû Contact Hostinger Support immediately"
    echo "   üåê Check https://hpanel.hostinger.com/ for server status"
    echo "   üìß Create support ticket for server investigation"
fi

echo ""
echo "üéØ IMMEDIATE NEXT STEPS"
echo "======================="

if [ ${#open_ports[@]} -gt 0 ]; then
    echo "‚úÖ Services detected on ports: ${open_ports[*]}"
    
    if [[ " ${open_ports[*]} " =~ " 80 " ]] || [[ " ${open_ports[*]} " =~ " 443 " ]]; then
        echo "üåê Web services appear to be running"
        echo "   Test: curl -I http://$VPS_IP"
    fi
fi

echo ""
echo "üìã DIAGNOSTIC SUMMARY"
echo "===================="
echo "Server IP: $VPS_IP"
echo "Ping: $(ping -c 1 $VPS_IP >/dev/null 2>&1 && echo "‚úÖ OK" || echo "‚ùå FAIL")"
echo "SSH: $([ "$ssh_success" = true ] && echo "‚úÖ Available on port $working_ssh_port" || echo "‚ùå Unavailable")"
echo "API: $([ "$api_working" = true ] && echo "‚úÖ Responsive" || echo "‚ùå Unresponsive")"
echo "Open Ports: $([ ${#open_ports[@]} -gt 0 ] && echo "${open_ports[*]}" || echo "None detected")"

# Cleanup
rm -f /tmp/api_response.json
